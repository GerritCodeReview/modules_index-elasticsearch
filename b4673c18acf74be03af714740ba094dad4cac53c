{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ccf8bb7_9c5954af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-14T16:04:54Z",
      "side": 1,
      "message": "(copied from I23bb1e8b73 for consistency)\n\nHi Luca, please read and respond to my comment on the core change in response to David: https://gerrit-review.googlesource.com/c/gerrit/+/339114/comments/f3344963_33d02879\n\nI specifically address the difference there between knowing offline reindex vs a desired index behavior. I do not believe they are the same, but please add comments there if you disagree.",
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3d6c469_c8d8f766",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-14T22:21:05Z",
      "side": 1,
      "message": "Thanks for the pointer, answered.\n\nI agree with you that it isn\u0027t a boolean but an enum, according to [1].\nAlso, I\u0027m not sure that when working online the \u0027true\u0027 value is right, but it should rather be \u0027wait_for\u0027.\n\nNote that there are a lot more parameters we may need to add, apart from the refresh one.\n\nIn a nutshell, the enum is correct and needs the following values:\n\u0027true\u0027 - refresh the shards but don\u0027t wait for the refresh to complete\n\u0027wait_for\u0027 - refresh the shards *AND* wait for the refresh to complete\n\u0027false\u0027 - do not refresh the shards\n\nP.S. All of them are specific to the way ES manages its sharding policy hence makes sense in this project.\n\n[1] https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html#docs-update-api-query-params",
      "parentUuid": "8ccf8bb7_9c5954af",
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba13622e_b3cbc158",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-15T01:51:13Z",
      "side": 1,
      "message": "\u003e Thanks for the pointer, answered.\n\u003e \n\u003e I agree with you that it isn\u0027t a boolean but an enum, according to [1].\n\u003e Also, I\u0027m not sure that when working online the \u0027true\u0027 value is right, but it should rather be \u0027wait_for\u0027.\n\nNo, `true` is correct. See below.\n\n\u003e \n\u003e Note that there are a lot more parameters we may need to add, apart from the refresh one.\n\nWhich of those do you think are interesting to Gerrit use cases?\n\n\u003e \n\u003e In a nutshell, the enum is correct and needs the following values:\n\u003e \u0027true\u0027 - refresh the shards but don\u0027t wait for the refresh to complete\n\u003e \u0027wait_for\u0027 - refresh the shards *AND* wait for the refresh to complete\n\u003e \u0027false\u0027 - do not refresh the shards\n\nThis isn\u0027t what [1] says, but we were confused by its wording at first too.\n\nFrom [1]:\nIf `true`, Elasticsearch refreshes the affected shards to make this operation\nvisible to search, if `wait_for` then wait for a refresh to make this operation\nvisible to search, if `false` do nothing with refreshes.\n\nWe followed up with the ES list [2] to confirm that behavior when `refresh\u003dtrue`.\n\n[2] https://discuss.elastic.co/t/refresh-setting-for-a-bulk-update-request/295641/7\n\n\u003e \n\u003e P.S. All of them are specific to the way ES manages its sharding policy hence makes sense in this project.\n\nI agree this implementation makes sense in this project. If you\u0027re implying that EnsureReadsConsistentWithWrite in core is somehow leaking the ES sharding policy into core, I disagree. Using a Gerrit-index policy specifier like EnsureReadsConsistentWithWrite is protection against that while allowing ES to correctly implement the desired policy.\n\n\u003e [1] https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html#docs-update-api-query-params",
      "parentUuid": "f3d6c469_c8d8f766",
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd8bf7af_26f1008b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-17T13:44:39Z",
      "side": 1,
      "message": "\u003e \u003e Thanks for the pointer, answered.\n\u003e \u003e \n\u003e \u003e I agree with you that it isn\u0027t a boolean but an enum, according to [1].\n\u003e \u003e Also, I\u0027m not sure that when working online the \u0027true\u0027 value is right, but it should rather be \u0027wait_for\u0027.\n\u003e \n\u003e No, `true` is correct. See below.\n\u003e \n\u003e \u003e \n\u003e \u003e Note that there are a lot more parameters we may need to add, apart from the refresh one.\n\u003e \n\u003e Which of those do you think are interesting to Gerrit use cases?\n\nFor Gerrit in HA I\u0027d say:\n- retry_on_conflict\n- _source, _source_excludes, _source_includes\n- timeout\n- wait_for_active_shards\n\nHowever, I\u0027d suggest to make the ones above configurable in a follow-up change.\n\nThe TOP priority IMHO is timeout, but also the others may need to be tuned by the Gerrit admin on a production system.\n\n\u003e \u003e \n\u003e \u003e In a nutshell, the enum is correct and needs the following values:\n\u003e \u003e \u0027true\u0027 - refresh the shards but don\u0027t wait for the refresh to complete\n\u003e \u003e \u0027wait_for\u0027 - refresh the shards *AND* wait for the refresh to complete\n\u003e \u003e \u0027false\u0027 - do not refresh the shards\n\u003e \n\u003e This isn\u0027t what [1] says, but we were confused by its wording at first too.\n\u003e \n\u003e From [1]:\n\u003e If `true`, Elasticsearch refreshes the affected shards to make this operation\n\u003e visible to search, if `wait_for` then wait for a refresh to make this operation\n\u003e visible to search, if `false` do nothing with refreshes.\n\u003e \n\u003e We followed up with the ES list [2] to confirm that behavior when `refresh\u003dtrue`.\n\u003e \n\u003e [2] https://discuss.elastic.co/t/refresh-setting-for-a-bulk-update-request/295641/7\n\nThanks for the pointer. I am wondering why the wait_for for introduced?\n\n\u003e \u003e P.S. All of them are specific to the way ES manages its sharding policy hence makes sense in this project.\n\u003e \n\u003e I agree this implementation makes sense in this project. If you\u0027re implying that EnsureReadsConsistentWithWrite in core is somehow leaking the ES sharding policy into core, I disagree. Using a Gerrit-index policy specifier like EnsureReadsConsistentWithWrite is protection against that while allowing ES to correctly implement the desired policy.\n\nI believe it would make sense to discuss that in core, as this change works as-is without modifications to Gerrit.\n\nOnce Gerrit will have (on master?) a new concept of \u0027bulk operations\u0027 or \u0027inconsistent writes\u0027, we could leverage that.\nActually, it could allow improve the off-line reindexing for Lucene even further, possibly using some lower-level API?\n\n\u003e \u003e [1] https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html#docs-update-api-query-params",
      "parentUuid": "ba13622e_b3cbc158",
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89fe016a_3aade3d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-22T23:36:57Z",
      "side": 1,
      "message": "\u003e \u003e If `true`, Elasticsearch refreshes the affected shards to make this operation\n\u003e \u003e visible to search, if `wait_for` then wait for a refresh to make this operation\n\u003e \u003e visible to search, if `false` do nothing with refreshes.\n\u003e \n\u003e Thanks for the pointer. I am wondering why the wait_for for introduced?\n\n`wait_for` is a \"compromise\" solution from ES. Unlike `true`, it doesn\u0027t force a refresh and instead relies on the ES server\u0027s automatic refresh settings; however, like `true`, it does promise that a refresh occurs before it returns. It could be used to reduce the load on the ES server from many write/index operations while still guaranteeing consistency, but at the cost of increased latency for write/index operations. We don\u0027t currently think Gerrit\u0027s write load with `true` will be sufficient to create an ES server load problem, so we\u0027re sticking with `true` for the lower latency.\n\n\u003e \u003e \u003e P.S. All of them are specific to the way ES manages its sharding policy hence makes sense in this project.\n\u003e \u003e \n\u003e \u003e I agree this implementation makes sense in this project. If you\u0027re implying that EnsureReadsConsistentWithWrite in core is somehow leaking the ES sharding policy into core, I disagree. Using a Gerrit-index policy specifier like EnsureReadsConsistentWithWrite is protection against that while allowing ES to correctly implement the desired policy.\n\u003e \n\u003e I believe it would make sense to discuss that in core, as this change works as-is without modifications to Gerrit.\n\nI\u0027ll discuss it wherever you\u0027d like ðŸ˜Š But I do want the discussion to happen somewhere related to this change if this change is blocked because of it.\n\nAs for the \"works as-is\", IIUC, this only works because of what you comment on elsewhere in this change as \"This is hack\" [1]. As I\u0027m sure you understand, I (and the ops team I work closely with) strongly prefer non-hack solutions.\n\n[1] https://gerrit-review.googlesource.com/c/modules/index-elasticsearch/+/339314/comments/1aad16fb_210bf08e\n\n\u003e \n\u003e Once Gerrit will have (on master?) a new concept of \u0027bulk operations\u0027 or \u0027inconsistent writes\u0027, we could leverage that.\n\u003e Actually, it could allow improve the off-line reindexing for Lucene even further, possibly using some lower-level API?\n\nI think there\u0027s some confusion on what Lucene is currently doing. See my comment on the core change: https://gerrit-review.googlesource.com/c/gerrit/+/339114/comments/f388bf00_de059b2c",
      "parentUuid": "cd8bf7af_26f1008b",
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa397f1e_a323cb60",
        "filename": "src/main/java/com/google/gerrit/elasticsearch/ElasticIndexModule.java",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-06-14T14:42:33Z",
      "side": 1,
      "message": "flag",
      "range": {
        "startLine": 44,
        "startChar": 40,
        "endLine": 44,
        "endChar": 44
      },
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "193a0dac_28fd63d5",
        "filename": "src/main/java/com/google/gerrit/elasticsearch/ElasticIndexModule.java",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-14T22:21:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa397f1e_a323cb60",
      "range": {
        "startLine": 44,
        "startChar": 40,
        "endLine": 44,
        "endChar": 44
      },
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aad16fb_210bf08e",
        "filename": "src/main/java/com/google/gerrit/elasticsearch/ElasticIndexModule.java",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-14T14:12:36Z",
      "side": 1,
      "message": "This is hack and needs a different solution for master: we need an additional parameter to specify that the instantiation was done for an offline reindexing.\n\nAlternatively, we could have a different module altogether for offline, as also the objects needed for the runtime could be different (e.g. there is no lifecycle listeners or others)",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 45,
        "endChar": 0
      },
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "101deaf5_6d56db73",
        "filename": "src/main/java/com/google/gerrit/elasticsearch/ElasticIndexModule.java",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-06-14T15:02:42Z",
      "side": 1,
      "message": "We are using actually string type:\n\n  params.put(\"refresh\", ensureReadsConsistentWithWrite.toString());\n\nso that we could already bind it in injector as String and avoid converting from Boolean to boolean to String on the usage sites.",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 74,
        "endChar": 45
      },
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5544da9a_e1d3ca80",
        "filename": "src/main/java/com/google/gerrit/elasticsearch/ElasticIndexModule.java",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-14T22:21:05Z",
      "side": 1,
      "message": "Actually the whole Map isn\u0027t needed at this point, because the refresh param has only one possible entry called \u0027refresh\u0027. I\u0027m ditching the map altogether.",
      "parentUuid": "101deaf5_6d56db73",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 74,
        "endChar": 45
      },
      "revId": "b4673c18acf74be03af714740ba094dad4cac53c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}